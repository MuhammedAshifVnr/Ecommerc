basePath: /
definitions:
  database.CategoryData:
    properties:
      catagory:
        type: string
      description:
        type: string
    type: object
  database.Logging:
    properties:
      password:
        type: string
      useremail:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample Gin API with Swagger documentation.
  title: ECOM
  version: "1.0"
paths:
  /admin/category:
    get:
      description: Admin can see the listed  category in ecommerce website
      produces:
      - application/json
      responses: {}
      summary: get all category list by admin
      tags:
      - Admin-Category
    post:
      consumes:
      - application/json
      description: Add a new category with the provided details
      operationId: add-category
      parameters:
      - description: Category Add
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/database.CategoryData'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added.
          schema:
            type: string
        "404":
          description: Duplicate found.
          schema:
            type: string
      summary: Add a new category
      tags:
      - Admin-Category
  /admin/category/{ID}:
    delete:
      description: Deletes a category by ID
      parameters:
      - description: Category ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a category
      tags:
      - Admin-Category
    patch:
      description: Admin can Block the listed  category in ecommerce website
      parameters:
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Admin can block the category
      tags:
      - Admin-Category
    put:
      description: Admin can edit the listed  category in ecommerce website
      parameters:
      - description: User ID
        in: path
        name: ID
        required: true
        type: string
      - description: Category Edit
        in: body
        name: Form
        required: true
        schema:
          $ref: '#/definitions/database.CategoryData'
      produces:
      - application/json
      responses: {}
      summary: Admin can edit the category
      tags:
      - Admin-Category
  /admin/home:
    get:
      description: after login show this page
      produces:
      - application/json
      responses: {}
      summary: Admin Home Page
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Login an admin user with username and password
      operationId: admin-login
      parameters:
      - description: Admin login details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/database.Logging'
      produces:
      - application/json
      responses: {}
      summary: Login an admin user
      tags:
      - Admin
  /admin/logout:
    get:
      description: Logout an admin clearing the cookie
      produces:
      - application/json
      responses: {}
      summary: Logout an admin user
      tags:
      - Admin
  /admin/order:
    get:
      description: All Orders  are listed here
      produces:
      - application/json
      responses: {}
      summary: Orders Listing
      tags:
      - Admin
  /admin/order/update/{ID}:
    patch:
      consumes:
      - multipart/form-data
      description: Update the status of an order by ID.
      operationId: update-order
      parameters:
      - description: Order ID
        in: path
        name: ID
        required: true
        type: integer
      - description: New status
        in: formData
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Update Order Status
  /admin/product:
    get:
      description: get all product list by admin
      produces:
      - application/json
      responses: {}
      summary: Admin can see the listed  products in ecommerce website
      tags:
      - Admin-Product
    post:
      consumes:
      - multipart/form-data
      description: Add a new product to the database
      parameters:
      - description: Name of the product
        in: formData
        name: product
        required: true
        type: string
      - description: Name of the category the product belongs to
        in: formData
        name: category
        required: true
        type: string
      - description: Quantity of the product
        in: formData
        name: quantity
        required: true
        type: integer
      - description: Price of the product
        in: formData
        name: price
        required: true
        type: number
      - description: Size of the product
        in: formData
        name: size
        required: true
        type: integer
      - description: Description of the product
        in: formData
        name: description
        required: true
        type: string
      - collectionFormat: csv
        description: Images of the product (upload at least 3 images)
        in: formData
        items:
          type: file
        name: images
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Add a new product
      tags:
      - Admin-Product
  /admin/product/{ID}:
    delete:
      consumes:
      - application/json
      description: Deletes a product by its ID
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Delete a product
      tags:
      - Admin-Product
    put:
      consumes:
      - multipart/form-data
      description: Edits a product by its ID, including updating its category, quantity,
        price, size, description, and images
      operationId: edit-product
      parameters:
      - description: Product ID
        in: path
        name: ID
        required: true
        type: integer
      - description: Name of the product
        in: formData
        name: product
        required: true
        type: string
      - description: Product category name
        in: formData
        name: category
        required: true
        type: string
      - description: Product quantity
        in: formData
        name: quantity
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: string
      - description: Product size
        in: formData
        name: size
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - collectionFormat: csv
        description: Product images
        in: formData
        items:
          type: file
        name: images
        required: true
        type: array
      produces:
      - application/json
      responses: {}
      summary: Edit a product
      tags:
      - Admin-Product
  /admin/users:
    get:
      description: Admin can see the users in ecommerce website
      produces:
      - application/json
      responses: {}
      tags:
      - Admin-Users
  /admin/users/{ID}:
    patch:
      description: Admin can Block and Unblock the users in ecommerce website
      parameters:
      - description: User ID
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      tags:
      - Admin-Users
swagger: "2.0"
